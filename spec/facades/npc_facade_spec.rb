require 'rails_helper'

RSpec.describe 'NPC Facade' do
  it "It returns npc poro" do
    npc = NpcFacade.create_npc('standard array', 1)

    expect(npc).to be_a(Array)
    expect(npc[1]).to be_a(Array)
    expect(npc[1][0]).to be_a(Pack)
    expect(npc[2]).to be_a(Array)
    expect(npc[2][0]).to be_a(Armor) unless npc[2][0] == ''
    expect(npc[3]).to be_a(Array)
    expect(npc[3][0]).to be_a(Weapon)
    expect(npc[4]).to be_a(Array) unless npc[4] == 'Not a spellcaster'
    expect(npc[4][0]).to be_a(Array) unless npc[4] == [] || npc[4] == 'Not a spellcaster'
    expect(npc[4][0][1]).to be_a(Spell) unless npc[4] == [] || npc[4] == 'Not a spellcaster'
    expect(npc[0]).to be_a(NpcModel)
    expect(npc[0].alignment).to be_a(String)
    expect(npc[0].ancestry).to be_a(String)
    expect(npc[0].archetype_name).to be_a(String)
    expect(npc[0].archetype_desc).to be_a(String)
    expect(npc[0].armor_class).to be_a(String)
    expect(npc[0].background_equipment).to be_a(String)
    expect(npc[0].background_extra_languages).to be_a(String)
    expect(npc[0].background_name).to be_a(String)
    expect(npc[0].personality_personality).to be_a(String)
    expect(npc[0].personality_ideal).to be_a(String)
    expect(npc[0].personality_bond).to be_a(String)
    expect(npc[0].personality_flaw).to be_a(String)
    expect(npc[0].skill_proficiency_one).to be_a(String)
    expect(npc[0].skill_proficiency_two).to be_a(String)
    expect(npc[0].background_tool_proficiency_one).to be_a(String)
    expect(npc[0].background_tool_proficiency_two).to be_a(String)
    expect(npc[0].character_class).to be_a(String)
    expect(npc[0].equipment_extras).to be_a(String)
    expect(npc[0].gold).to be_a(String)
    expect(npc[0].gender).to be_a(String)
    expect(npc[0].hit_dice).to be_a(String)
    expect(npc[0].initiative).to be_a(String)
    expect(npc[0].languages).to be_a(String)
    expect(npc[0].level).to be_a(String)
    expect(npc[0].name).to be_a(String)
    expect(npc[0].proficiencies_armor).to be_a(String)
    expect(npc[0].proficiencies_weapons).to be_a(String)
    expect(npc[0].proficiencies_tools).to be_a(String)
    expect(npc[0].size).to be_a(String)
    expect(npc[0].speed).to be_a(String)
    expect(npc[0].core_modifiers_str_mod).to be_a(String)
    expect(npc[0].core_modifiers_dex_mod).to be_a(String)
    expect(npc[0].core_modifiers_con_mod).to be_a(String)
    expect(npc[0].core_modifiers_int_mod).to be_a(String)
    expect(npc[0].core_modifiers_wis_mod).to be_a(String)
    expect(npc[0].core_modifiers_cha_mod).to be_a(String)
    expect(npc[0].core_scores_str).to be_a(String)
    expect(npc[0].core_scores_dex).to be_a(String)
    expect(npc[0].core_scores_con).to be_a(String)
    expect(npc[0].core_scores_int).to be_a(String)
    expect(npc[0].core_scores_wis).to be_a(String)
    expect(npc[0].core_scores_cha).to be_a(String)
    expect(npc[0].hit_points).to be_a(String)
    expect(npc[0].passive_perception).to be_a(String)
    expect(npc[0].saving_throws_str).to be_a(String)
    expect(npc[0].saving_throws_dex).to be_a(String)
    expect(npc[0].saving_throws_con).to be_a(String)
    expect(npc[0].saving_throws_int).to be_a(String)
    expect(npc[0].saving_throws_wis).to be_a(String)
    expect(npc[0].saving_throws_cha).to be_a(String)
    expect(npc[0].skills_proficiencies).to be_a(String)
    expect(npc[0].skills_acrobatics).to be_a(String)
    expect(npc[0].skills_animal_handling).to be_a(String)
    expect(npc[0].skills_arcana).to be_a(String)
    expect(npc[0].skills_athletics).to be_a(String)
    expect(npc[0].skills_deception).to be_a(String)
    expect(npc[0].skills_history).to be_a(String)
    expect(npc[0].skills_insight).to be_a(String)
    expect(npc[0].skills_intimidation).to be_a(String)
    expect(npc[0].skills_investigation).to be_a(String)
    expect(npc[0].skills_medicine).to be_a(String)
    expect(npc[0].skills_nature).to be_a(String)
    expect(npc[0].skills_perception).to be_a(String)
    expect(npc[0].skills_performance).to be_a(String)
    expect(npc[0].skills_persuasion).to be_a(String)
    expect(npc[0].skills_religion).to be_a(String)
    expect(npc[0].skills_sleight_of_hand).to be_a(String)
    expect(npc[0].skills_stealth).to be_a(String)
    expect(npc[0].skills_survival).to be_a(String)
    expect(npc[0].sub_ancestry).to be_a(String)
    expect(npc[0].spell_slots).to be_a(String)
    expect(npc[0].traits).to be_a(String)
    expect(npc[0].vision).to be_a(String)
    expect(npc[0].is_saved).to be_a(Integer)
  end

  it "It destroys npc poro" do
    npc = NpcFacade.create_npc('standard array', 1)
    
    expect(NpcModel.all.count).to eq(1)

    NpcFacade.destroy_npc(npc[0].id)

    expect(NpcModel.all.count).to eq(0)
  end
end
